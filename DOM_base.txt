giБазовая работа с DOM-деревом:
Что нужно знать для выполнения:
- document.querySelector
- element.onClick
- element.style
- element.style.backgroundColor
- element.innerText
- element.value
- element.onkeypress

1. На странице отобразить блок произвольного размера и кнопку. При нажатии на кнопку блок окрашивается в другой цвет.

2. На странице отобразить заголовок h1 с произвольным текстом и кнопку. При нажатии на кнопку текст в заголовке меняется на другой.

3. На странице отобразить поле для ввода (input), кнопку и блок для вывода текста. При нажатии на кнопку текст внутри блока вывода заменяется на значение из поля ввода.

4. На странице отобразить поле для ввода (input) и блок для вывода текста. При вводе очередного символа в поле ввода текст внутри блока вывода заменяется на значение из поля ввода.

Что нужно знать для выполнения:
- event object
- event.clientx
- event.offsetx
- event.altKey

5. На странице отобразить блок и заголовок h2. При клике на блок содержимое заголовка меняется на значение координаты x клика относительно блока.

6. На странице отобразить блок и заголовок h2. При клике на блок содержимое заголовка меняется на значение координаты y клика относительно страницы.

7. На странице отобразить блок и заголовок h2. При клике на блок содержимое заголовка меняется на значение координаты y клика относительно страницы, но только при условии, что в момент клика была зажата клавиша Alt. Если нет, то менять содержимое h2 на "Alt не нажат"

Что нужно знать для выполнения:
- element.addEventListener
- второй параметр element.addEventListener (опции)
- события mouseover и mouseout
- element.style.backgroundColor
- event.stopPropagation

8. На странице отобразить блок и заголовок h2. При наведении курсора мыши на блок текст заголовка устанавливать в "Героям слава!", цвет текста должен быть желтым, а фон - синим. При смещении курсора с блока И ИЗНАЧАЛЬНО текст заголовка устанавливать в "Слава Украине!", цвет текста должен быть синим, а фон - желтым.

9. Сделать то же самое, что в задании 9, но цвет текста должен менять один обработчик, а цвет фона - другой.

10. На странице отобразить блок размером 200х200 пикселей, в который вложен блок размером 100х100 пикселей, внутренний блок отцентрировать по горизонтали и вертикали относительно внешнего, блоки покрасить разными цветами (дальше - вложенные блоки). При нажатии на внутренний блок выводить в консоль сначала текст "inner", который должен выводить обработчик, привязанный к внутреннему блоку, потом выводить в консоль "outer", который должен выводить обработчик, привязанный к внешнему блоку.

11. Сделать то же самое, что и в задании 11, но сначала должно выводится "outer", потом "inner". Использовать перехват события на фазе погружения, поменять выводимый обработчиками текст нельзя.

12. На странице отобразить вложенные блоки. Сделать так, чтобы при клике на внутренний в консоль выводился текст "inner", создаваемый обработчиком, привязанным к внутреннему блоку. При клике на внешний выводится текст "outer", привязанный к внешнему блоку. При этом, при нажатии на внутренний блок "outer" не выводится. Реализоать при помощи stopPropagation

Что нужно знать для выполнения:
- event.preventDefault
- event.buttons

13. На странице отобразить блок и заголовок h2. При нажатии на нём левой кнопкой мыши текст заголовка установить в "Нажата левая", при нажатии правой - в "Нажата правая". Контекстное меню при этом не должно вызываться.

Что нужно знать для выполнения:
- element.classlist

14. На странице отобразить блок произвольного размера и кнопку. При нажатии на кнопку блок окрашивается в другой цвет. На этот раз не работаем со стилем блока напрямую, а добавляем блоку класс, который заранее описан в CSS с нужными стилями. Для добавления класса используем classlist

15. На странице отобразить блок произвольного размера и кнопку. При клике на кнопку блок окрашивается в другой цвет: при первом клике в красный, при втором - в желтый, при третем - в зелёный, при четвёртом - в красный и т.д. На этот раз не работаем со стилем блока напрямую, а добавляем блоку класс, который заранее описан в CSS с нужными стилями. Для добавления класса используем classlist.

16. На странице отобразить блок одного цвета. При клике на блок он меняет цвет на другой. При втором клике - на первоначальный и т.д. Использовать classlist.toggle


Что нужно знать для выполнения:
- event.target
- делегирование обработки событий

17. На странице отобразить вложенные блоки. Сделать так, чтобы при клике на внутренний в консоль выводился текст "inner", создаваемый обработчиком, привязанным к внутреннему блоку. При клике на внешний выводится текст "outer", привязанный к внешнему блоку. При этом, при нажатии на внутренний блок "outer" не выводится. На этот раз использовать target, можно использовать любой признак, для определения поведения (повесить отдельные классы или атрибуты, и.т.п.).

18. На странице отобразить блок, в который вложено несколько других блоков, причём дочерние расположены таким образом, что полностью не покрывают родительский. Дочерние и родительский выделить отдельным цветом. В каждом дочернем блоке должен быть уникальный текст: 1, 2, 3 ... Кроме этого на странице реализовать блок для вывода текста. На родительский блок повесить обработчик, который при клике на дочерний элемент будет выводить в блок вывода текста значение уникального текста из дочернего элемента. При клике же на родительский блок в блок вывода должно выводится сообщение: "Ошибка, выберите опцию".

19. На странице отобразить блок, разделённый на 25 блоков вертикальными и горизонтальными линиями (таблица 5х5). При клике на любую "ячейку" она окрашивается в желтый цвет. При повторном клике цвет пропадает. Обработчик для этого должен быть один (на родительском блоке).

20. На странице отобразить поле ввода, кнопку и блок вывода. При клике на кнопку появляется диалоговое окно: оно должно быть на весь экран, отображаться поверх содержимого сайта иметь черный чвет с прозрачностью 60%. В центре него должен быть непрозрачный блок, на котором отображаются текст и две кнопки: "Ок" и "Cancel". Текст для диалогового окна взять из текущего значения в поле ввода. После на клика на кнопку "Ок" или "Cancel" диалоговое окно закрывается(исчезает), а в блок вывода записывается "Option 1" или "Option 2". Кроме того, при клике на не контентную область диалогового окна (та, что черная и полупрозрачная), оно закрывается без изменения содержимого блока вывода. Подсказки: можно нарисовать диалоговое окно, чтобы оно постоянно присутствовало в разметке. Но при этом установить значение display:none для div верхнего уровня. При необходимости показать окно добавить ему класс, например visible, который будет содержать свойство display: flex. Тогда добавляя и убирая этот класс можно показывать и скрывать диалоговое окно. Для закрытия диалогового окна можно воспользоваться делегированием: на div верхнего уровня вешаем обработчик, который закрывает окно, если клик был на элементе, содержащем определённый класс (например, close). Таким образом, просто добавляем данный класс тем элементам, клик на которые должен закрывать окно. Обработка дополнительной логики при закрытии реализуется для тех элементов, для которых это требуется.

Что нужно знать для выполнения:
- window.location.href

21. На странице отобразить ссылку, в которой указать путь для перехода на "http://www.google.com". При нажатии на ссылку должно появиться диалоговое окно с текстом "Вы действительно хотите перейти на сторонний сайт?" и двумя кнопками "Да" и "Нет". При нажатии на кнопку "Да" происходит переход по указаному адресу. При нажатии на кнопку "Нет" диалоговое окно закрывается и никакого перехода не происходит.

Что нужно знать для выполнения:
- шаблонизированые строки JS

22. Создать объект с полями name и age. Написать функцию, которая принимает в качестве аргумента такой объект, и выводит в консоль два раза строку "Hello, name, you are age yeards old". При этом вместо name и age должны быть значения полей из переданого объекта объекта. Первая строка должна быть сформирована при помощи конкатенации, вторая - при помощи шаблонной строки.

Что нужно знать для выполнения:
- document.createElement
- element.appendChild
- element.insertBefore
- element.insertadjacenthtml

23. На странице отобразить блок. В нём при помощи JS создать два блока: один с помощью createElement, второй - insertadjacenthtml. Блоки должны представлять из себя div, иметь хотя бы один класс и внутренний текст.

24. Отобразить на странице два вложеных в друг друга блока. Создать ещё 4 блока при помощи разных аргументов insertadjacenthtml с разным содержимым. Метод insertadjacenthtml применять к внешнему блоку. Посмотреть, как располагаются созданные блоки относительно изначально существующих блоков.

25. Отобразить на странице три блока. На каждый из них повесить обработчик клика, который выводит в консоль уникальное сообщение. При этом все обработчики должны отработать только один раз. Первый обработчик через onclick. Второй и третий - через addEventListener. При этом повторная отработка второго отменяется при помощи опций addEventListener, а третьего - при помощи removeEventListener.

Что нужно знать для выполнения:
- цикл for

26. Отобразить на странице блок. При помощи цикла for заполнить блок 100 вложеными ячейками, создав таблицу 10х10, в которых в качестве внутреннего текста будет их порядковый номер. Ячейки создавать и вставлять в родительский блок при помощи appendChild.

27. Отобразить на странице блок. В нём при помощи вложенного цикла и создания элементов расчертить шахматную доску 8х8 клеток, чередующихся черного и белого цветов.

Что нужно знать для выполнения:
- window.getComputedStyle

28. На странице отобразить блок, кнопку и поле ввода (для цифр). После ввода в поле числа от 1 до 10 расчертить в блоке шахматную доску размера, указанного в поле ввода. При этом нужно управлять размером ячеек при помощи JS, чтобы размер внешнего блока не менялся и при этом был полностью заполнен клетками.


Что нужно знать для выполнения:
- element.dataset

29. Отобразить блок, внутри которого отобразить 100 вложенных блоков (таблица 10х10) и отдельный блок для вывода. При клике на вложенный блок он должен менять цвет в порядке красный-желтый-зелёный. При этом необходимо хранить информацию о количестве кликов, сделаных по каждому блоку, для этого использовать инструменты dataset. При клике по блоку с зажатой кнопкой Ctrl в блок для вывода выводится строка "блок №х: у кликов", где х - порядковый номер ячейки (хранить тоже в отдельном атрибуте), а у - количество кликов по этому блоку (без тех, которые с зажатой кнопкой Ctrl).

30. Отобразить на странице блок, в котором расчертить шахматное поле 8х8 клеток. При клике на любое из полей оно должно становиться желтого цвета, при этом все доступные поля с этого поля для хода конём должны получать в центре небольшой кружок жёлтого цвета, подсказывая таким образом, куда доступны ходы. При клике на другую клетку выделение с первоначальной и доступные с неё ходы убираются. Дополнительное задание: добавить на страницу дропдаун с выбором шахматной фигуры (король, ферзь, ладья, слон, конь) и при клике на поле показывать ходы, доступные для текущей фигуры.
